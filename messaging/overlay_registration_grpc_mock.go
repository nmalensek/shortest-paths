// Code generated by MockGen. DO NOT EDIT.
// Source: ./overlay_registration_grpc.pb.go

// Package messaging is a generated GoMock package.
package messaging

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockOverlayRegistrationClient is a mock of OverlayRegistrationClient interface.
type MockOverlayRegistrationClient struct {
	ctrl     *gomock.Controller
	recorder *MockOverlayRegistrationClientMockRecorder
}

// MockOverlayRegistrationClientMockRecorder is the mock recorder for MockOverlayRegistrationClient.
type MockOverlayRegistrationClientMockRecorder struct {
	mock *MockOverlayRegistrationClient
}

// NewMockOverlayRegistrationClient creates a new mock instance.
func NewMockOverlayRegistrationClient(ctrl *gomock.Controller) *MockOverlayRegistrationClient {
	mock := &MockOverlayRegistrationClient{ctrl: ctrl}
	mock.recorder = &MockOverlayRegistrationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlayRegistrationClient) EXPECT() *MockOverlayRegistrationClientMockRecorder {
	return m.recorder
}

// DeregisterNode mocks base method.
func (m *MockOverlayRegistrationClient) DeregisterNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*DeregistrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterNode", varargs...)
	ret0, _ := ret[0].(*DeregistrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterNode indicates an expected call of DeregisterNode.
func (mr *MockOverlayRegistrationClientMockRecorder) DeregisterNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterNode", reflect.TypeOf((*MockOverlayRegistrationClient)(nil).DeregisterNode), varargs...)
}

// GetOverlay mocks base method.
func (m *MockOverlayRegistrationClient) GetOverlay(ctx context.Context, in *EdgeRequest, opts ...grpc.CallOption) (OverlayRegistration_GetOverlayClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOverlay", varargs...)
	ret0, _ := ret[0].(OverlayRegistration_GetOverlayClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverlay indicates an expected call of GetOverlay.
func (mr *MockOverlayRegistrationClientMockRecorder) GetOverlay(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverlay", reflect.TypeOf((*MockOverlayRegistrationClient)(nil).GetOverlay), varargs...)
}

// NodeFinished mocks base method.
func (m *MockOverlayRegistrationClient) NodeFinished(ctx context.Context, in *NodeStatus, opts ...grpc.CallOption) (*TaskCompleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeFinished", varargs...)
	ret0, _ := ret[0].(*TaskCompleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeFinished indicates an expected call of NodeFinished.
func (mr *MockOverlayRegistrationClientMockRecorder) NodeFinished(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeFinished", reflect.TypeOf((*MockOverlayRegistrationClient)(nil).NodeFinished), varargs...)
}

// NodeReady mocks base method.
func (m *MockOverlayRegistrationClient) NodeReady(ctx context.Context, in *NodeStatus, opts ...grpc.CallOption) (*TaskReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeReady", varargs...)
	ret0, _ := ret[0].(*TaskReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeReady indicates an expected call of NodeReady.
func (mr *MockOverlayRegistrationClientMockRecorder) NodeReady(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeReady", reflect.TypeOf((*MockOverlayRegistrationClient)(nil).NodeReady), varargs...)
}

// ProcessMetadata mocks base method.
func (m *MockOverlayRegistrationClient) ProcessMetadata(ctx context.Context, in *MessagingMetadata, opts ...grpc.CallOption) (*MetadataConfirmation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessMetadata", varargs...)
	ret0, _ := ret[0].(*MetadataConfirmation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessMetadata indicates an expected call of ProcessMetadata.
func (mr *MockOverlayRegistrationClientMockRecorder) ProcessMetadata(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMetadata", reflect.TypeOf((*MockOverlayRegistrationClient)(nil).ProcessMetadata), varargs...)
}

// RegisterNode mocks base method.
func (m *MockOverlayRegistrationClient) RegisterNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterNode", varargs...)
	ret0, _ := ret[0].(*RegistrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNode indicates an expected call of RegisterNode.
func (mr *MockOverlayRegistrationClientMockRecorder) RegisterNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNode", reflect.TypeOf((*MockOverlayRegistrationClient)(nil).RegisterNode), varargs...)
}

// MockOverlayRegistration_GetOverlayClient is a mock of OverlayRegistration_GetOverlayClient interface.
type MockOverlayRegistration_GetOverlayClient struct {
	ctrl     *gomock.Controller
	recorder *MockOverlayRegistration_GetOverlayClientMockRecorder
}

// MockOverlayRegistration_GetOverlayClientMockRecorder is the mock recorder for MockOverlayRegistration_GetOverlayClient.
type MockOverlayRegistration_GetOverlayClientMockRecorder struct {
	mock *MockOverlayRegistration_GetOverlayClient
}

// NewMockOverlayRegistration_GetOverlayClient creates a new mock instance.
func NewMockOverlayRegistration_GetOverlayClient(ctrl *gomock.Controller) *MockOverlayRegistration_GetOverlayClient {
	mock := &MockOverlayRegistration_GetOverlayClient{ctrl: ctrl}
	mock.recorder = &MockOverlayRegistration_GetOverlayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlayRegistration_GetOverlayClient) EXPECT() *MockOverlayRegistration_GetOverlayClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockOverlayRegistration_GetOverlayClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockOverlayRegistration_GetOverlayClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockOverlayRegistration_GetOverlayClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockOverlayRegistration_GetOverlayClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockOverlayRegistration_GetOverlayClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockOverlayRegistration_GetOverlayClient)(nil).Context))
}

// Header mocks base method.
func (m *MockOverlayRegistration_GetOverlayClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockOverlayRegistration_GetOverlayClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockOverlayRegistration_GetOverlayClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockOverlayRegistration_GetOverlayClient) Recv() (*Edge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Edge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockOverlayRegistration_GetOverlayClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockOverlayRegistration_GetOverlayClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockOverlayRegistration_GetOverlayClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockOverlayRegistration_GetOverlayClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockOverlayRegistration_GetOverlayClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockOverlayRegistration_GetOverlayClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockOverlayRegistration_GetOverlayClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockOverlayRegistration_GetOverlayClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockOverlayRegistration_GetOverlayClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockOverlayRegistration_GetOverlayClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockOverlayRegistration_GetOverlayClient)(nil).Trailer))
}

// MockOverlayRegistrationServer is a mock of OverlayRegistrationServer interface.
type MockOverlayRegistrationServer struct {
	ctrl     *gomock.Controller
	recorder *MockOverlayRegistrationServerMockRecorder
}

// MockOverlayRegistrationServerMockRecorder is the mock recorder for MockOverlayRegistrationServer.
type MockOverlayRegistrationServerMockRecorder struct {
	mock *MockOverlayRegistrationServer
}

// NewMockOverlayRegistrationServer creates a new mock instance.
func NewMockOverlayRegistrationServer(ctrl *gomock.Controller) *MockOverlayRegistrationServer {
	mock := &MockOverlayRegistrationServer{ctrl: ctrl}
	mock.recorder = &MockOverlayRegistrationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlayRegistrationServer) EXPECT() *MockOverlayRegistrationServerMockRecorder {
	return m.recorder
}

// DeregisterNode mocks base method.
func (m *MockOverlayRegistrationServer) DeregisterNode(arg0 context.Context, arg1 *Node) (*DeregistrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterNode", arg0, arg1)
	ret0, _ := ret[0].(*DeregistrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterNode indicates an expected call of DeregisterNode.
func (mr *MockOverlayRegistrationServerMockRecorder) DeregisterNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterNode", reflect.TypeOf((*MockOverlayRegistrationServer)(nil).DeregisterNode), arg0, arg1)
}

// GetOverlay mocks base method.
func (m *MockOverlayRegistrationServer) GetOverlay(arg0 *EdgeRequest, arg1 OverlayRegistration_GetOverlayServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverlay", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOverlay indicates an expected call of GetOverlay.
func (mr *MockOverlayRegistrationServerMockRecorder) GetOverlay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverlay", reflect.TypeOf((*MockOverlayRegistrationServer)(nil).GetOverlay), arg0, arg1)
}

// NodeFinished mocks base method.
func (m *MockOverlayRegistrationServer) NodeFinished(arg0 context.Context, arg1 *NodeStatus) (*TaskCompleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeFinished", arg0, arg1)
	ret0, _ := ret[0].(*TaskCompleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeFinished indicates an expected call of NodeFinished.
func (mr *MockOverlayRegistrationServerMockRecorder) NodeFinished(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeFinished", reflect.TypeOf((*MockOverlayRegistrationServer)(nil).NodeFinished), arg0, arg1)
}

// NodeReady mocks base method.
func (m *MockOverlayRegistrationServer) NodeReady(arg0 context.Context, arg1 *NodeStatus) (*TaskReadyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeReady", arg0, arg1)
	ret0, _ := ret[0].(*TaskReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeReady indicates an expected call of NodeReady.
func (mr *MockOverlayRegistrationServerMockRecorder) NodeReady(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeReady", reflect.TypeOf((*MockOverlayRegistrationServer)(nil).NodeReady), arg0, arg1)
}

// ProcessMetadata mocks base method.
func (m *MockOverlayRegistrationServer) ProcessMetadata(arg0 context.Context, arg1 *MessagingMetadata) (*MetadataConfirmation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMetadata", arg0, arg1)
	ret0, _ := ret[0].(*MetadataConfirmation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessMetadata indicates an expected call of ProcessMetadata.
func (mr *MockOverlayRegistrationServerMockRecorder) ProcessMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMetadata", reflect.TypeOf((*MockOverlayRegistrationServer)(nil).ProcessMetadata), arg0, arg1)
}

// RegisterNode mocks base method.
func (m *MockOverlayRegistrationServer) RegisterNode(arg0 context.Context, arg1 *Node) (*RegistrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNode", arg0, arg1)
	ret0, _ := ret[0].(*RegistrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNode indicates an expected call of RegisterNode.
func (mr *MockOverlayRegistrationServerMockRecorder) RegisterNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNode", reflect.TypeOf((*MockOverlayRegistrationServer)(nil).RegisterNode), arg0, arg1)
}

// mustEmbedUnimplementedOverlayRegistrationServer mocks base method.
func (m *MockOverlayRegistrationServer) mustEmbedUnimplementedOverlayRegistrationServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOverlayRegistrationServer")
}

// mustEmbedUnimplementedOverlayRegistrationServer indicates an expected call of mustEmbedUnimplementedOverlayRegistrationServer.
func (mr *MockOverlayRegistrationServerMockRecorder) mustEmbedUnimplementedOverlayRegistrationServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOverlayRegistrationServer", reflect.TypeOf((*MockOverlayRegistrationServer)(nil).mustEmbedUnimplementedOverlayRegistrationServer))
}

// MockUnsafeOverlayRegistrationServer is a mock of UnsafeOverlayRegistrationServer interface.
type MockUnsafeOverlayRegistrationServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOverlayRegistrationServerMockRecorder
}

// MockUnsafeOverlayRegistrationServerMockRecorder is the mock recorder for MockUnsafeOverlayRegistrationServer.
type MockUnsafeOverlayRegistrationServerMockRecorder struct {
	mock *MockUnsafeOverlayRegistrationServer
}

// NewMockUnsafeOverlayRegistrationServer creates a new mock instance.
func NewMockUnsafeOverlayRegistrationServer(ctrl *gomock.Controller) *MockUnsafeOverlayRegistrationServer {
	mock := &MockUnsafeOverlayRegistrationServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOverlayRegistrationServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOverlayRegistrationServer) EXPECT() *MockUnsafeOverlayRegistrationServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOverlayRegistrationServer mocks base method.
func (m *MockUnsafeOverlayRegistrationServer) mustEmbedUnimplementedOverlayRegistrationServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOverlayRegistrationServer")
}

// mustEmbedUnimplementedOverlayRegistrationServer indicates an expected call of mustEmbedUnimplementedOverlayRegistrationServer.
func (mr *MockUnsafeOverlayRegistrationServerMockRecorder) mustEmbedUnimplementedOverlayRegistrationServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOverlayRegistrationServer", reflect.TypeOf((*MockUnsafeOverlayRegistrationServer)(nil).mustEmbedUnimplementedOverlayRegistrationServer))
}

// MockOverlayRegistration_GetOverlayServer is a mock of OverlayRegistration_GetOverlayServer interface.
type MockOverlayRegistration_GetOverlayServer struct {
	ctrl     *gomock.Controller
	recorder *MockOverlayRegistration_GetOverlayServerMockRecorder
}

// MockOverlayRegistration_GetOverlayServerMockRecorder is the mock recorder for MockOverlayRegistration_GetOverlayServer.
type MockOverlayRegistration_GetOverlayServerMockRecorder struct {
	mock *MockOverlayRegistration_GetOverlayServer
}

// NewMockOverlayRegistration_GetOverlayServer creates a new mock instance.
func NewMockOverlayRegistration_GetOverlayServer(ctrl *gomock.Controller) *MockOverlayRegistration_GetOverlayServer {
	mock := &MockOverlayRegistration_GetOverlayServer{ctrl: ctrl}
	mock.recorder = &MockOverlayRegistration_GetOverlayServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlayRegistration_GetOverlayServer) EXPECT() *MockOverlayRegistration_GetOverlayServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockOverlayRegistration_GetOverlayServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockOverlayRegistration_GetOverlayServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockOverlayRegistration_GetOverlayServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockOverlayRegistration_GetOverlayServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockOverlayRegistration_GetOverlayServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockOverlayRegistration_GetOverlayServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockOverlayRegistration_GetOverlayServer) Send(arg0 *Edge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockOverlayRegistration_GetOverlayServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockOverlayRegistration_GetOverlayServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockOverlayRegistration_GetOverlayServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockOverlayRegistration_GetOverlayServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockOverlayRegistration_GetOverlayServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockOverlayRegistration_GetOverlayServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockOverlayRegistration_GetOverlayServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockOverlayRegistration_GetOverlayServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockOverlayRegistration_GetOverlayServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockOverlayRegistration_GetOverlayServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockOverlayRegistration_GetOverlayServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockOverlayRegistration_GetOverlayServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockOverlayRegistration_GetOverlayServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockOverlayRegistration_GetOverlayServer)(nil).SetTrailer), arg0)
}
