// Code generated by MockGen. DO NOT EDIT.
// Source: ./shortest_paths_grpc.pb.go

// Package messaging is a generated GoMock package.
package messaging

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockPathMessengerClient is a mock of PathMessengerClient interface.
type MockPathMessengerClient struct {
	ctrl     *gomock.Controller
	recorder *MockPathMessengerClientMockRecorder
}

// MockPathMessengerClientMockRecorder is the mock recorder for MockPathMessengerClient.
type MockPathMessengerClientMockRecorder struct {
	mock *MockPathMessengerClient
}

// NewMockPathMessengerClient creates a new mock instance.
func NewMockPathMessengerClient(ctrl *gomock.Controller) *MockPathMessengerClient {
	mock := &MockPathMessengerClient{ctrl: ctrl}
	mock.recorder = &MockPathMessengerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathMessengerClient) EXPECT() *MockPathMessengerClientMockRecorder {
	return m.recorder
}

// AcceptMessage mocks base method.
func (m *MockPathMessengerClient) AcceptMessage(ctx context.Context, in *PathMessage, opts ...grpc.CallOption) (*PathResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptMessage", varargs...)
	ret0, _ := ret[0].(*PathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptMessage indicates an expected call of AcceptMessage.
func (mr *MockPathMessengerClientMockRecorder) AcceptMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptMessage", reflect.TypeOf((*MockPathMessengerClient)(nil).AcceptMessage), varargs...)
}

// GetMessagingData mocks base method.
func (m *MockPathMessengerClient) GetMessagingData(ctx context.Context, in *MessagingDataRequest, opts ...grpc.CallOption) (*MessagingMetadata, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMessagingData", varargs...)
	ret0, _ := ret[0].(*MessagingMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagingData indicates an expected call of GetMessagingData.
func (mr *MockPathMessengerClientMockRecorder) GetMessagingData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagingData", reflect.TypeOf((*MockPathMessengerClient)(nil).GetMessagingData), varargs...)
}

// PushPaths mocks base method.
func (m *MockPathMessengerClient) PushPaths(ctx context.Context, opts ...grpc.CallOption) (PathMessenger_PushPathsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PushPaths", varargs...)
	ret0, _ := ret[0].(PathMessenger_PushPathsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushPaths indicates an expected call of PushPaths.
func (mr *MockPathMessengerClientMockRecorder) PushPaths(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushPaths", reflect.TypeOf((*MockPathMessengerClient)(nil).PushPaths), varargs...)
}

// StartTask mocks base method.
func (m *MockPathMessengerClient) StartTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskConfirmation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTask", varargs...)
	ret0, _ := ret[0].(*TaskConfirmation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTask indicates an expected call of StartTask.
func (mr *MockPathMessengerClientMockRecorder) StartTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTask", reflect.TypeOf((*MockPathMessengerClient)(nil).StartTask), varargs...)
}

// MockPathMessenger_PushPathsClient is a mock of PathMessenger_PushPathsClient interface.
type MockPathMessenger_PushPathsClient struct {
	ctrl     *gomock.Controller
	recorder *MockPathMessenger_PushPathsClientMockRecorder
}

// MockPathMessenger_PushPathsClientMockRecorder is the mock recorder for MockPathMessenger_PushPathsClient.
type MockPathMessenger_PushPathsClientMockRecorder struct {
	mock *MockPathMessenger_PushPathsClient
}

// NewMockPathMessenger_PushPathsClient creates a new mock instance.
func NewMockPathMessenger_PushPathsClient(ctrl *gomock.Controller) *MockPathMessenger_PushPathsClient {
	mock := &MockPathMessenger_PushPathsClient{ctrl: ctrl}
	mock.recorder = &MockPathMessenger_PushPathsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathMessenger_PushPathsClient) EXPECT() *MockPathMessenger_PushPathsClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockPathMessenger_PushPathsClient) CloseAndRecv() (*ConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*ConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockPathMessenger_PushPathsClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockPathMessenger_PushPathsClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockPathMessenger_PushPathsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPathMessenger_PushPathsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPathMessenger_PushPathsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPathMessenger_PushPathsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPathMessenger_PushPathsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPathMessenger_PushPathsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPathMessenger_PushPathsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPathMessenger_PushPathsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPathMessenger_PushPathsClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockPathMessenger_PushPathsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPathMessenger_PushPathsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPathMessenger_PushPathsClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPathMessenger_PushPathsClient) Send(arg0 *Edge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPathMessenger_PushPathsClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPathMessenger_PushPathsClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPathMessenger_PushPathsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPathMessenger_PushPathsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPathMessenger_PushPathsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPathMessenger_PushPathsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPathMessenger_PushPathsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPathMessenger_PushPathsClient)(nil).Trailer))
}

// MockPathMessengerServer is a mock of PathMessengerServer interface.
type MockPathMessengerServer struct {
	ctrl     *gomock.Controller
	recorder *MockPathMessengerServerMockRecorder
}

// MockPathMessengerServerMockRecorder is the mock recorder for MockPathMessengerServer.
type MockPathMessengerServerMockRecorder struct {
	mock *MockPathMessengerServer
}

// NewMockPathMessengerServer creates a new mock instance.
func NewMockPathMessengerServer(ctrl *gomock.Controller) *MockPathMessengerServer {
	mock := &MockPathMessengerServer{ctrl: ctrl}
	mock.recorder = &MockPathMessengerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathMessengerServer) EXPECT() *MockPathMessengerServerMockRecorder {
	return m.recorder
}

// AcceptMessage mocks base method.
func (m *MockPathMessengerServer) AcceptMessage(arg0 context.Context, arg1 *PathMessage) (*PathResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptMessage", arg0, arg1)
	ret0, _ := ret[0].(*PathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptMessage indicates an expected call of AcceptMessage.
func (mr *MockPathMessengerServerMockRecorder) AcceptMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptMessage", reflect.TypeOf((*MockPathMessengerServer)(nil).AcceptMessage), arg0, arg1)
}

// GetMessagingData mocks base method.
func (m *MockPathMessengerServer) GetMessagingData(arg0 context.Context, arg1 *MessagingDataRequest) (*MessagingMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagingData", arg0, arg1)
	ret0, _ := ret[0].(*MessagingMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagingData indicates an expected call of GetMessagingData.
func (mr *MockPathMessengerServerMockRecorder) GetMessagingData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagingData", reflect.TypeOf((*MockPathMessengerServer)(nil).GetMessagingData), arg0, arg1)
}

// PushPaths mocks base method.
func (m *MockPathMessengerServer) PushPaths(arg0 PathMessenger_PushPathsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushPaths", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushPaths indicates an expected call of PushPaths.
func (mr *MockPathMessengerServerMockRecorder) PushPaths(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushPaths", reflect.TypeOf((*MockPathMessengerServer)(nil).PushPaths), arg0)
}

// StartTask mocks base method.
func (m *MockPathMessengerServer) StartTask(arg0 context.Context, arg1 *TaskRequest) (*TaskConfirmation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTask", arg0, arg1)
	ret0, _ := ret[0].(*TaskConfirmation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTask indicates an expected call of StartTask.
func (mr *MockPathMessengerServerMockRecorder) StartTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTask", reflect.TypeOf((*MockPathMessengerServer)(nil).StartTask), arg0, arg1)
}

// mustEmbedUnimplementedPathMessengerServer mocks base method.
func (m *MockPathMessengerServer) mustEmbedUnimplementedPathMessengerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPathMessengerServer")
}

// mustEmbedUnimplementedPathMessengerServer indicates an expected call of mustEmbedUnimplementedPathMessengerServer.
func (mr *MockPathMessengerServerMockRecorder) mustEmbedUnimplementedPathMessengerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPathMessengerServer", reflect.TypeOf((*MockPathMessengerServer)(nil).mustEmbedUnimplementedPathMessengerServer))
}

// MockUnsafePathMessengerServer is a mock of UnsafePathMessengerServer interface.
type MockUnsafePathMessengerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePathMessengerServerMockRecorder
}

// MockUnsafePathMessengerServerMockRecorder is the mock recorder for MockUnsafePathMessengerServer.
type MockUnsafePathMessengerServerMockRecorder struct {
	mock *MockUnsafePathMessengerServer
}

// NewMockUnsafePathMessengerServer creates a new mock instance.
func NewMockUnsafePathMessengerServer(ctrl *gomock.Controller) *MockUnsafePathMessengerServer {
	mock := &MockUnsafePathMessengerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePathMessengerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePathMessengerServer) EXPECT() *MockUnsafePathMessengerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPathMessengerServer mocks base method.
func (m *MockUnsafePathMessengerServer) mustEmbedUnimplementedPathMessengerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPathMessengerServer")
}

// mustEmbedUnimplementedPathMessengerServer indicates an expected call of mustEmbedUnimplementedPathMessengerServer.
func (mr *MockUnsafePathMessengerServerMockRecorder) mustEmbedUnimplementedPathMessengerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPathMessengerServer", reflect.TypeOf((*MockUnsafePathMessengerServer)(nil).mustEmbedUnimplementedPathMessengerServer))
}

// MockPathMessenger_PushPathsServer is a mock of PathMessenger_PushPathsServer interface.
type MockPathMessenger_PushPathsServer struct {
	ctrl     *gomock.Controller
	recorder *MockPathMessenger_PushPathsServerMockRecorder
}

// MockPathMessenger_PushPathsServerMockRecorder is the mock recorder for MockPathMessenger_PushPathsServer.
type MockPathMessenger_PushPathsServerMockRecorder struct {
	mock *MockPathMessenger_PushPathsServer
}

// NewMockPathMessenger_PushPathsServer creates a new mock instance.
func NewMockPathMessenger_PushPathsServer(ctrl *gomock.Controller) *MockPathMessenger_PushPathsServer {
	mock := &MockPathMessenger_PushPathsServer{ctrl: ctrl}
	mock.recorder = &MockPathMessenger_PushPathsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathMessenger_PushPathsServer) EXPECT() *MockPathMessenger_PushPathsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPathMessenger_PushPathsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPathMessenger_PushPathsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPathMessenger_PushPathsServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockPathMessenger_PushPathsServer) Recv() (*Edge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*Edge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPathMessenger_PushPathsServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPathMessenger_PushPathsServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPathMessenger_PushPathsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPathMessenger_PushPathsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPathMessenger_PushPathsServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockPathMessenger_PushPathsServer) SendAndClose(arg0 *ConnectionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockPathMessenger_PushPathsServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockPathMessenger_PushPathsServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockPathMessenger_PushPathsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPathMessenger_PushPathsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPathMessenger_PushPathsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPathMessenger_PushPathsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPathMessenger_PushPathsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPathMessenger_PushPathsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPathMessenger_PushPathsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPathMessenger_PushPathsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPathMessenger_PushPathsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPathMessenger_PushPathsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPathMessenger_PushPathsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPathMessenger_PushPathsServer)(nil).SetTrailer), arg0)
}
