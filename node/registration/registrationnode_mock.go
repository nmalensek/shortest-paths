// Code generated by MockGen. DO NOT EDIT.
// Source: registrationnode.go

// Package registration is a generated GoMock package.
package registration

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// Mockdialer is a mock of dialer interface.
type Mockdialer struct {
	ctrl     *gomock.Controller
	recorder *MockdialerMockRecorder
}

// MockdialerMockRecorder is the mock recorder for Mockdialer.
type MockdialerMockRecorder struct {
	mock *Mockdialer
}

// NewMockdialer creates a new mock instance.
func NewMockdialer(ctrl *gomock.Controller) *Mockdialer {
	mock := &Mockdialer{ctrl: ctrl}
	mock.recorder = &MockdialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdialer) EXPECT() *MockdialerMockRecorder {
	return m.recorder
}

// DialFunc mocks base method.
func (m *Mockdialer) DialFunc(target string, opts ...grpc.DialOption) (*grpc.ClientConn, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{target}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DialFunc", varargs...)
	ret0, _ := ret[0].(*grpc.ClientConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DialFunc indicates an expected call of DialFunc.
func (mr *MockdialerMockRecorder) DialFunc(target interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{target}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialFunc", reflect.TypeOf((*Mockdialer)(nil).DialFunc), varargs...)
}
